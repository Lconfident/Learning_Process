<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--
      mapper为映射的根节点，用来管理DAO接口
      namespace指定DAO接口的完整类名，表示mapper配置文件管理哪个DAO接口(包.接口名)
      mybatis会依据这个接口动态创建一个实现类去实现这个接口，而这个实现类是一个Mapper对象
   -->

<mapper namespace="com.atguigu.mapper.EmployeeMapper">
    <!--
          id = "接口中的方法名"
          parameterType = "接口中传入方法的参数类型"
          resultType = "返回实体类对象：包.类名"  处理结果集 自动封装
          注意:sql语句后不要出现";"号
              查询：select标签
              增加：insert标签
              修改：update标签
              删除：delete标签
      -->

    <!-- List<Employee> query(@Param("name") String name, @Param("salary") Double salary);
         如果传入属性，就判断相等；如果不传入，不加对应的条件
         where role1.自动添加where关键字 whereas内部有任何一个if满足，自动添加where关键字，不满足去掉where
               role2.自动去掉多余的and和or关键字
         if    判断判断传入的参数，最终是否添加语句 test 属性，内部运算，true 拼接标签内部的语句；反之则不
               大于和小于 不推荐直接写符号！ 实体符号 html > == &gt; < == &lt;
     -->
    <sql id="selectSql">
        select * from t_emp
    </sql>

    <select id="query" resultType="employee">
        <include refid="selectSql"/>
        <where>
            <if test="name != null and name != ''">
                emp_name=#{name}
            </if>
            <if test="salary != null and salary &gt; 100">
                and emp_salary = #{salary}
            </if>
        </where>
    </select>

    <!-- int update(Employee employee);
            set： role1：自动去掉多余的逗号，
                  role2：自动添加set关键字
     -->
    <update id="update" parameterType="employee">
        update t_emp
        <set>
            <if test="empName!=null">
                emp_name = #{empName},
            </if>
            <if test="empSalary != null">
                emp_salary = #{empSalary}
            </if>
        </set>
        where emp_id = #{empId}
    </update>


    <!-- List<Employee> queryTrim(@Param("name") String name, @Param("salary") Double salary); -->
    <select id="query" resultType="employee">
        <include refid="selectSql"/>
        <trim prefix="where" suffixOverrides="and|or">
            <if test="name != null and name != ''">
                emp_name=#{name} and
            </if>
            <if test="salary != null and salary &gt; 100">
                emp_salary = #{salary}
            </if>
        </trim>
    </select>

    <!-- List<Employee> queryChoose(@Param("name") String name, @Param("salary") Double salary); -->
    <select id="queryChoose" resultType="employee">
        select * from t_emp
        where
        <choose>
            <when test="name != null">
                emp_name=#{name}
            </when>
            <when test="salary != null">
                and emp_salary = #{salary}
            </when>
            <otherwise>
                1=1
            </otherwise>
        </choose>
    </select>


    <!-- // 根据id批量查询 -->
    <!-- List<Employee> queryBatch(@Param("ids") List<Integer> ids); -->
    <select id="queryBatch" resultType="employee">
        select * from t_emp
        where emp_id in
        # 遍历的数据
        # collection=“ids | arg0 |　list”
        # open 遍历之前要追加的字符串
        # separator 集合的分隔符，如果是最后一个，不会追加
        # close 遍历之后追加的字符串
        # item 获取每个遍历项
        <foreach collection="ids" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>
    </select>

    <!-- // 根据id批量删除 -->
    <!-- int deleteBatch(@Param("ids") List<Integer> ids); -->
    <delete id="deleteBatch">
        delete from t_emp where emp_id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        # (1,2,3)
    </delete>

    <!-- // 批量添加 -->
    <!-- int insertBatch(@Param("list") List<Employee> employeeList); -->
    <insert id="insertBatch">
        insert into t_emp(emp_name, emp_salary)
        values
        <foreach collection="list" separator="," item="employee">
            (#{employee.empName},#{employee.empSalary})
        </foreach>
        # ('xxx',20),('aaa',200),('bbb',30)
    </insert>

    <!-- // 批量修改 -->
    <!-- int updateBatch(@Param("list") List<Employee> employeeList); -->
    <update id="updateBatch">
        <foreach collection="list" item="employee" >
            update t_emp set emp_name=#{employee.empName},emp_salary=#{employee.empSalary}
            where emp_id=#{employee.empId};
        </foreach>
    </update>
</mapper>